//resource used to generate this solution https://www.youtube.com/watch?v=w8gEr1VEvbc
#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <map>
#include <sstream>
#include <string>

using namespace std;


int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    
    int n,q;
    
    string curr = "", attr_name;
    map<string, string> m;
    
    cin>>n>>q;
    cin.ignore();
    
    for(int i = 0; i < n; i++){
        string line,tag,extract;
        getline(cin,line);
        stringstream ss(line);
        
        //process the HRML lines
        while(getline(ss,extract, ' ')){
            //if its a tag
            if(extract[0]=='<'){
                //if its an opening tag
                if(extract[1]!= '/'){
                    //remove the opening bracket
                    tag = extract.substr(1);
                    //for tags without attributes
                    if(tag[tag.length()-1]=='>'){
                        //remove the closing bracket
                        tag.pop_back();
                    }
                    //check if nesting is needed
                    if(curr.size() > 0){
                        //nest this tag
                        curr += "." + tag;
                        //first iteration
                        //curr = "tag1"
                        //second iteration
                        //curr = "tag1.tag2"
                    }
                    else{
                        curr = tag;
                    }
                    
                }
                //if it is a closing tag
                else{
                    tag = extract.substr(2,(extract.find('>') - 2));
                    //check if a nested tag has to be closed
                    
                    size_t pos = curr.find("." + tag);
                    if(pos != string::npos){
                        //remove the nested tag
                        curr = curr.substr(0,pos);
                    }
                    else {
                        //All tags are closed 
                        curr = "";
                    }
                    
                }
                
                
            }
            //if it is an attribute value - finding what is inbertween the first and last " mark
            else if(extract[0]=='"'){
                //capture the full value
                size_t pos = extract.find_last_of('"');
                string attr_value = extract.substr(1,pos-1);
                
                //adding the value to map
                m[attr_name] = attr_value;
            }
            else{
                if(extract != "="){
                    //Its definitely an attribute name
                    attr_name = curr + "~" + extract;
                }
            }
            
        }
    }
    
    
    //get the values with the queries
    string query;
    for(int i = 0; i < q; i++){
        getline(cin,query);
        
        //search in the map
        map<string,string>::iterator itr = m.find(query);
        if(itr != m.end()){
            cout<<itr->second<<endl;
        }
        else{
            cout<< "Not Found!" << endl;
        }
        
    }
    
    return 0;
}
